import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.cg.demo.exceptions.InvalidAccountException;
import com.cg.demo.exceptions.InvalidInitialAmountException;
import com.cg.demo.pojo.Account;
import com.cg.demo.repo.AccountDAO;
import com.cg.demo.service.AccountService;
import com.cg.demo.service.AccountServiceImpl;

public class AccountTest {

	private AccountService service;
	
	@Mock
	private AccountDAO dao;
	
	@Before
	public void init(){
		MockitoAnnotations.initMocks(this);
		service = new AccountServiceImpl(dao);
	}
	//1. System should create account successfully, if min Rs. 500/- are deposited while creating account
	//2. System should give error if user attempts to create account with less than Rs. 500/-
	
	
	@Test
	public void account_should_be_created_successfully_if_amount_is_min_500() throws InvalidInitialAmountException {
		
		Account a = new Account(1);
		a.setBalance(1000);
		
		when(dao.save(a)).thenReturn(true);
		
		Account newAccount = service.createAccount(1000);
		assertEquals(1000.0+"", newAccount.getBalance()+"");
	}
	
	@Test(expected=InvalidInitialAmountException.class)
	public void account_should_not_be_created_if_amount_is_less_than_500() throws InvalidInitialAmountException {
		service.createAccount(100);
	}

	//1. when valid accountNumber is passed showBalance(System) should return the Account information of that account
	//2. when invalid accountNumber is passed showBalance(System) should display error message 

	@Test
	public void when_valid_accountNumber_is_passed_method_should_return_account_object() throws InvalidAccountException{
		Account oldObject = new Account(100);
		oldObject.setBalance(15000);

		when(dao.findByNumber(100)).thenReturn(oldObject);
		
		assertEquals(15000.0+"", service.showBalance(100).getBalance()+"");
	}
}


















